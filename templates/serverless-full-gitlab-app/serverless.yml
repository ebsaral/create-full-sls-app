org: <%= organization %>

service: <%= projectName %>
app: <%= projectName %>

useDotenv: true

plugins:
  <% if (!enableDataDog) { %>#<% } %>- serverless-plugin-datadog
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-domain-manager
  - serverless-api-gateway-throttling
  - serverless-offline
  - serverless-mocha-plugin

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: <%= memorySize %>
  timeout: <%= timeout %>
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'eu-central-1'}
  endpointType: REGIONAL
  apiGateway:
    minimumCompressionSize: <%= minimumCompressionSize %>
  environment:
    REGION: ${self:provider.region}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    SENTRY_DSN: ${env:SENTRY_DSN, ''}
  tags:
    env: ${self:custom.environments.${self:provider.stage}}
    application: <%= projectName %>
    iac: serverless
  stackTags: ${self:provider.tags}
  lambdaHashingVersion: 20201221

custom:
  apiGatewayThrottling:
    maxRequestsPerSecond: <%= maxRequestsPerSecond %>
    maxConcurrentRequests: <%= maxConcurrentRequests %> 
  serverless-offline:
    allowCache: true
    useChildProcesses: true
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  environments:
    local: development
    development: development
    production: production
  dd_enabled:
    local: false
    development: false
    production: <% if (enableDataDog) { %>true<% } else { %>false<% } %>
  datadogArn:
    eu-central-1: <%= dataDogArnEuCentral %>
    us-east-1: <%= dataDogArnUsEast %>
  datadog:
    enabled: ${self:custom.dd_enabled.${self:provider.stage}, false}
    site: datadoghq.eu # TODO: Adjust this value if it's in US
    subscribeToApiGatewayLogs: false
    forwarder: ${self:custom.datadogArn.${opt:region, 'eu-central-1'}}
  domains:
    local: localhost
    development: <%= developmentUrl %>
    production: <%= productionUrl %>
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: ""
    stage: ${self:provider.stage}
    createRoute53Record: true
    <% if (enableMultiRegion) { %>
    endpointType: "regional"
    certificateRegion: ${opt:region, 'eu-central-1'}
    route53Params:
      routingPolicy: latency
    <% } %>
  corsAllowedHeaders:
    - Accept-Language
    - Accept-Encoding
    - Content-Type
    - X-Amz-Date
    - Authorization
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - X-Request-Id

functions:
  Status:
    handler: src/main.Status
    events:
      - http:
          method: get
          cors:
            origin: "*"
            headers: ${self:custom.corsAllowedHeaders}
          path: status
          request:
            parameters:
              querystrings:
                param1: true
